name: 'Run On Msys2'
author: 'Atom Long (@atomlong)'
description: 'Automatically build msys2 PKGBUILD and deploy packages to cloud drive.'

branding:
  icon: refresh-ccw
  color: orange

inputs:
  rcloneConfig:
    description: 'The content rclone config file.'
    required: true
    default: ''
  pgpKey:
    description: 'PGP private key used to Sign alarm package.'
    required: false
    default: ''
  pgpKeyPassword:
    description: 'The password of PGP private key.'
    required: false
    default: ''
  deployPath:
    description: 'The path to deploy msys2 package. such as onedrive:mirrors/msys2/msys/x86_64/'
    required: true
    default: ''
  pacmanRepo:
    description: 'The repository to which the msys2 package belongs, such as core,community,extra.'
    required: false
    default: 'msys'
  customRepos:
    description: 'Custom package repositories to install packages via pacman, such as [msys]http://mirror.msys2.org/$arch/$repo. Use commas to separate multiple repositories.'
    required: false
    default: ''
outputs:
  status:
    description: 'Success when packages were build successfully, otherwise Failed.'
    value: ${{ steps.build.outputs.status }}
  message:
    description: 'Build message.'
    value: ${{ steps.build.outputs.message }}
  logs:
    description: 'Build log archive.'
    value: ${{ steps.build.outputs.logs }}

runs:
  using: "composite"
  steps:
  - name: Setup Msys2
    if: ${{ runner.os == 'Windows' }}
    uses: msys2/setup-msys2@v2
    id: setup
    with:
      msystem: MSYS
      install: git zip base-devel msys2-devel
      update: true
  - name: build package
    if: ${{ runner.os == 'Windows' }}
    id: build
    shell: "msys2 {0}"
    run: |
      # default variables
      export CI_REPO=${GITHUB_REPOSITORY}
      export CI_BUILD_DIR=${GITHUB_WORKSPACE}
      export CI_COMMIT=${GITHUB_SHA}
      export CI_BRANCH=${GITHUB_REF_NAME}
      export CI_BUILD_NUMBER=${GITHUB_RUN_NUMBER}
      # configurable variables
      export RCLONE_CONF='${{ inputs.rcloneConfig }}'
      export PGP_KEY='${{ inputs.pgpKey }}'
      export PGP_KEY_PASSWD='${{ inputs.pgpKeyPassword }}'
      export DEPLOY_PATH='${{ inputs.deployPath }}'
      export PACMAN_REPO='${{ inputs.pacmanRepo }}'
      export CUSTOM_REPOS='${{ inputs.customRepos }}'
      ${GITHUB_ACTION_PATH}/ci-build.sh | tee build-${CI_BUILD_NUMBER}.log
      zip -z -j build-${CI_BUILD_NUMBER}-log.zip build-${CI_BUILD_NUMBER}.log << EOF
      CI_REPO: ${CI_REPO}
      CI_BRANCH: ${CI_BRANCH}
      CI_COMMIT: ${CI_COMMIT}
      CI_BUILD_NUMBER: ${CI_BUILD_NUMBER}
      .
      EOF
      rm -f build-${CI_BUILD_NUMBER}.log
      echo "logs=build-${CI_BUILD_NUMBER}-log.zip" >> $GITHUB_OUTPUT
